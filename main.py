from typing import Set
import aiogram
import sqlite3
from bs4 import BeautifulSoup
import requests
import lxml
import starts
import sqlb
import parsing
from aiogram import Dispatcher, Bot, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import keyboard

bot = Bot(token="5292539763:AAGOlnQfykqYpd3MUPj-IrsXX3sWsyYgYw4")

dp = Dispatcher(bot, storage=MemoryStorage())

class seting(StatesGroup):
    set_lan = State()

class setting2(StatesGroup):
    set_lan2 = State()

with open ('test.txt', 'r') as f:
  old_data = f.read()
new_data = old_data.replace('starts.a', str((int(starts.a)+1)))
with open ('test.txt', 'w') as f:
  f.write(new_data)

@dp.message_handler(commands='start')
async def lang(message: types.Message):
  if starts.a=='1':
      sqlb.create()
  if sqlb.chest(message) is None:
    sqlb.add_id(message)
  elif sqlb.chest(message)[0] == message.chat.id:
   await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–µ–±–µ –≤ –∑–∞—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ –≤–∞–ª—é—Ç–Ω–æ–π –±–∏—Ä–∂–µ. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–≤–æ–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.", reply_markup=keyboard.startt())

@dp.message_handler(lambda message: message.text=="–ö—É—Ä—Å –≤–∞–ª—é—Çüìà")
async def choise(message: types.Message):
  await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",reply_markup=keyboard.duo())

@dp.message_handler(lambda message:message.text=="–í–∞–ª—é—Ç–∞ üí≤")
async def vall(message: types.Message):
  await message.answer(parsing.kurs())

@dp.message_handler(lambda message:message.text=="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Çø")
async def kripta(message: types.Message):
  pass

@dp.message_handler((lambda message:message.text=="–ù–∞–∑–∞–¥üîô"))
async def back(message: types.Message):
  await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",reply_markup=keyboard.startt())

@dp.message_handler((lambda message:message.text=="–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—åüíº"))
async def case(message: types.Message):
 await message.answer("–ü–æ—Ä—Ç—Ñ–µ–ª—å", reply_markup=keyboard.case())
 global n
 n=[sqlb.check(message),sqlb]

@dp.message_handler(lambda message:message.text=="–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—ã")
async def value(message: types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: \n {parsing.name_val()}")
    await seting.set_lan.set()

@dp.message_handler(state=seting.set_lan)
async def f(message: types.Message, state: FSMContext):
    global n
    n[0] = [message.text]
    await message.answer("–í–∞–ª—é—Ç—ã –≤—ã–±—Ä–∞–Ω–∞")
    await state.finish()

@dp.message_handler(lambda message:message.text=="–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç")
async def count(message: types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á—Ç–≤–æ –≤–∞–ª—é—Ç, –≤ —Ç–∞–∫–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤—ã –≤–≤–æ–¥–∏–ª–∏ –≤–∞–ª—é—Ç—ã(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    await setting2.set_lan2.set()

@dp.message_handler(state=setting2.set_lan2)
async def f(message: types.Message, state: FSMContext):
    global n
    n[1] = [message.text]
    await message.answer('–ö–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã –≤—ã–±—Ä–∞–Ω–æ')
    await state.finish()
n=[[0],[0]]

@dp.message_handler(lambda message:message.text=="–£–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
async def har(message: types.Message):
    if n[0][0]!=0 and n[1][0]!=0:
     sqlb.value(str(n[0][0]).split(","),str(n[1][0]).split(","),message.chat.id)
     await message.answer(f"{parsing.rub(message.chat.id)} RUB")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
